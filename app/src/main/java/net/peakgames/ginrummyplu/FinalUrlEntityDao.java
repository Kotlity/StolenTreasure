package net.peakgames.ginrummyplu;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINAL_URL_ENTITY".
*/
public class FinalUrlEntityDao extends AbstractDao<FinalUrlEntity, String> {

    public static final String TABLENAME = "FINAL_URL_ENTITY";

    /**
     * Properties of entity FinalUrlEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FinalUrlValue = new Property(0, String.class, "finalUrlValue", true, "FINAL_URL_VALUE");
    }


    public FinalUrlEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FinalUrlEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINAL_URL_ENTITY\" (" + //
                "\"FINAL_URL_VALUE\" TEXT PRIMARY KEY NOT NULL );"); // 0: finalUrlValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINAL_URL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FinalUrlEntity entity) {
        stmt.clearBindings();
 
        String finalUrlValue = entity.getFinalUrlValue();
        if (finalUrlValue != null) {
            stmt.bindString(1, finalUrlValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FinalUrlEntity entity) {
        stmt.clearBindings();
 
        String finalUrlValue = entity.getFinalUrlValue();
        if (finalUrlValue != null) {
            stmt.bindString(1, finalUrlValue);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FinalUrlEntity readEntity(Cursor cursor, int offset) {
        FinalUrlEntity entity = new FinalUrlEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // finalUrlValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FinalUrlEntity entity, int offset) {
        entity.setFinalUrlValue(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FinalUrlEntity entity, long rowId) {
        return entity.getFinalUrlValue();
    }
    
    @Override
    public String getKey(FinalUrlEntity entity) {
        if(entity != null) {
            return entity.getFinalUrlValue();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FinalUrlEntity entity) {
        return entity.getFinalUrlValue() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
