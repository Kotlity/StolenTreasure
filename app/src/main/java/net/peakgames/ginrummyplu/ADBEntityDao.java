package net.peakgames.ginrummyplu;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADBENTITY".
*/
public class ADBEntityDao extends AbstractDao<ADBEntity, String> {

    public static final String TABLENAME = "ADBENTITY";

    /**
     * Properties of entity ADBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AdbValue = new Property(0, String.class, "adbValue", true, "ADB_VALUE");
    }


    public ADBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ADBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADBENTITY\" (" + //
                "\"ADB_VALUE\" TEXT PRIMARY KEY NOT NULL );"); // 0: adbValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ADBEntity entity) {
        stmt.clearBindings();
 
        String adbValue = entity.getAdbValue();
        if (adbValue != null) {
            stmt.bindString(1, adbValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ADBEntity entity) {
        stmt.clearBindings();
 
        String adbValue = entity.getAdbValue();
        if (adbValue != null) {
            stmt.bindString(1, adbValue);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ADBEntity readEntity(Cursor cursor, int offset) {
        ADBEntity entity = new ADBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // adbValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ADBEntity entity, int offset) {
        entity.setAdbValue(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ADBEntity entity, long rowId) {
        return entity.getAdbValue();
    }
    
    @Override
    public String getKey(ADBEntity entity) {
        if(entity != null) {
            return entity.getAdbValue();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ADBEntity entity) {
        return entity.getAdbValue() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
